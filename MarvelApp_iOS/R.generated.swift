//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Service.plist`.
    static let servicePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Service", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Service", withExtension: "plist")`
    static func servicePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.servicePlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `Marvel-Logo`.
    static let marvelLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Marvel-Logo")
    
    /// `UIImage(named: "Marvel-Logo", bundle: ..., traitCollection: ...)`
    static func marvelLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marvelLogo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `MADetailViewCell`.
    static let maDetailViewCell = _R.nib._MADetailViewCell()
    /// Nib `MADetailViewHeader`.
    static let maDetailViewHeader = _R.nib._MADetailViewHeader()
    /// Nib `MAFeedViewCell`.
    static let maFeedViewCell = _R.nib._MAFeedViewCell()
    
    /// `UINib(name: "MADetailViewCell", in: bundle)`
    static func maDetailViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.maDetailViewCell)
    }
    
    /// `UINib(name: "MADetailViewHeader", in: bundle)`
    static func maDetailViewHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.maDetailViewHeader)
    }
    
    /// `UINib(name: "MAFeedViewCell", in: bundle)`
    static func maFeedViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.maFeedViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MADetailViewCell`.
    static let maDetailViewCell: Rswift.ReuseIdentifier<MADetailViewCell> = Rswift.ReuseIdentifier(identifier: "MADetailViewCell")
    /// Reuse identifier `MAFeedViewCell`.
    static let maFeedViewCell: Rswift.ReuseIdentifier<MAFeedViewCell> = Rswift.ReuseIdentifier(identifier: "MAFeedViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.details` struct is generated, and contains static references to 1 localization keys.
    struct details {
      /// Value: Details
      static let detailsTitle = Rswift.StringResource(key: "detailsTitle", tableName: "Details", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Details
      static func detailsTitle(_: Void = ()) -> String {
        return NSLocalizedString("detailsTitle", tableName: "Details", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.feed` struct is generated, and contains static references to 1 localization keys.
    struct feed {
      /// Value: Chars © 2018 MARVEL
      static let feedTitle = Rswift.StringResource(key: "feedTitle", tableName: "Feed", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Chars © 2018 MARVEL
      static func feedTitle(_: Void = ()) -> String {
        return NSLocalizedString("feedTitle", tableName: "Feed", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.global` struct is generated, and contains static references to 3 localization keys.
    struct global {
      /// Value: 
      static let noInternet = Rswift.StringResource(key: "noInternet", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let ok = Rswift.StringResource(key: "ok", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There's no description
      static let noDesc = Rswift.StringResource(key: "noDesc", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: 
      static func noInternet(_: Void = ()) -> String {
        return NSLocalizedString("noInternet", tableName: "Global", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ok
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("ok", tableName: "Global", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: There's no description
      static func noDesc(_: Void = ()) -> String {
        return NSLocalizedString("noDesc", tableName: "Global", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _MADetailViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MADetailViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MADetailViewCell"
      let name = "MADetailViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MADetailViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MADetailViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MADetailViewHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MADetailViewHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MAFeedViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MAFeedViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MAFeedViewCell"
      let name = "MAFeedViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MAFeedViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MAFeedViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Marvel-Logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Marvel-Logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let maDetailViewController = StoryboardViewControllerResource<MADetailViewController>(identifier: "MADetailViewController")
      let maFeedViewController = StoryboardViewControllerResource<MAFeedViewController>(identifier: "MAFeedViewController")
      let name = "Main"
      
      func maDetailViewController(_: Void = ()) -> MADetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: maDetailViewController)
      }
      
      func maFeedViewController(_: Void = ()) -> MAFeedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: maFeedViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().maFeedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'maFeedViewController' could not be loaded from storyboard 'Main' as 'MAFeedViewController'.") }
        if _R.storyboard.main().maDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'maDetailViewController' could not be loaded from storyboard 'Main' as 'MADetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
